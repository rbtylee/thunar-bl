<MACRO>
<NAME>THUNARX_MAJOR_VERSION</NAME>
#define THUNARX_MAJOR_VERSION 1
</MACRO>
<MACRO>
<NAME>THUNARX_MINOR_VERSION</NAME>
#define THUNARX_MINOR_VERSION 8
</MACRO>
<MACRO>
<NAME>THUNARX_MICRO_VERSION</NAME>
#define THUNARX_MICRO_VERSION 14
</MACRO>
<MACRO>
<NAME>THUNARX_CHECK_VERSION</NAME>
#define THUNARX_CHECK_VERSION(major,minor,micro) \
  (THUNARX_MAJOR_VERSION > (major) \
   || (THUNARX_MAJOR_VERSION == (major) \
       && THUNARX_MINOR_VERSION > (minor)) \
   || (THUNARX_MAJOR_VERSION == (major) \
       && THUNARX_MINOR_VERSION == (minor) \
       && THUNARX_MICRO_VERSION >= (micro)))
</MACRO>
<VARIABLE>
<NAME>thunarx_major_version</NAME>
extern const guint thunarx_major_version;
</VARIABLE>
<VARIABLE>
<NAME>thunarx_minor_version</NAME>
extern const guint thunarx_minor_version;
</VARIABLE>
<VARIABLE>
<NAME>thunarx_micro_version</NAME>
extern const guint thunarx_micro_version;
</VARIABLE>
<FUNCTION>
<NAME>thunarx_check_version</NAME>
<RETURNS>const gchar *</RETURNS>
guint required_major, guint required_minor, guint required_micro
</FUNCTION>
<MACRO>
<NAME>G_GNUC_WARN_UNUSED_RESULT</NAME>
#define G_GNUC_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
</MACRO>
<MACRO>
<NAME>THUNARX_FILE_INFO_NAMESPACE</NAME>
#define THUNARX_FILE_INFO_NAMESPACE \
  "access::*," \
  "id::filesystem," \
  "mountable::can-mount,standard::target-uri," \
  "preview::*," \
  "standard::type,standard::is-hidden,standard::is-backup," \
  "standard::is-symlink,standard::name,standard::display-name," \
  "standard::size,standard::symlink-target," \
  "time::*," \
  "trash::*," \
  "unix::gid,unix::uid,unix::mode," \
  "metadata::emblems"
</MACRO>
<MACRO>
<NAME>THUNARX_FILESYSTEM_INFO_NAMESPACE</NAME>
#define THUNARX_FILESYSTEM_INFO_NAMESPACE \
  "filesystem::*"
</MACRO>
<MACRO>
<NAME>THUNARX_TYPE_FILE_INFO</NAME>
#define THUNARX_TYPE_FILE_INFO            (thunarx_file_info_get_type ())
</MACRO>
<MACRO>
<NAME>THUNARX_FILE_INFO</NAME>
#define THUNARX_FILE_INFO(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), THUNARX_TYPE_FILE_INFO, ThunarxFileInfo))
</MACRO>
<MACRO>
<NAME>THUNARX_IS_FILE_INFO</NAME>
#define THUNARX_IS_FILE_INFO(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), THUNARX_TYPE_FILE_INFO))
</MACRO>
<MACRO>
<NAME>THUNARX_FILE_INFO_GET_IFACE</NAME>
#define THUNARX_FILE_INFO_GET_IFACE(obj)  (G_TYPE_INSTANCE_GET_INTERFACE ((obj), THUNARX_TYPE_FILE_INFO, ThunarxFileInfoIface))
</MACRO>
<STRUCT>
<NAME>ThunarxFileInfoIface</NAME>
struct _ThunarxFileInfoIface
{
  /*< private >*/
  GTypeInterface __parent__;

  /*< public >*/

  /* virtual methods */
  gchar     *(*get_name)            (ThunarxFileInfo *file_info);

  gchar     *(*get_uri)             (ThunarxFileInfo *file_info);
  gchar     *(*get_parent_uri)      (ThunarxFileInfo *file_info);
  gchar     *(*get_uri_scheme)      (ThunarxFileInfo *file_info);

  gchar     *(*get_mime_type)       (ThunarxFileInfo *file_info);
  gboolean   (*has_mime_type)       (ThunarxFileInfo *file_info,
                                     const gchar     *mime_type);

  gboolean   (*is_directory)        (ThunarxFileInfo *file_info);

  GFileInfo *(*get_file_info)       (ThunarxFileInfo *file_info);
  GFileInfo *(*get_filesystem_info) (ThunarxFileInfo *file_info);
  GFile     *(*get_location)        (ThunarxFileInfo *file_info);

  /*< private >*/
  void (*reserved0) (void);
  void (*reserved1) (void);
  void (*reserved2) (void);
  void (*reserved3) (void);
  void (*reserved4) (void);
  void (*reserved5) (void);
  void (*reserved6) (void);

  /*< public >*/

  /* signals */
  void (*changed) (ThunarxFileInfo *file_info);
  void (*renamed) (ThunarxFileInfo *file_info);

  /*< private >*/
  void (*reserved7) (void);
  void (*reserved8) (void);
  void (*reserved9) (void);
};
</STRUCT>
<FUNCTION>
<NAME>thunarx_file_info_get_type</NAME>
<RETURNS>GType</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>thunarx_file_info_get_name</NAME>
<RETURNS>gchar *</RETURNS>
ThunarxFileInfo *file_info
</FUNCTION>
<FUNCTION>
<NAME>thunarx_file_info_get_uri</NAME>
<RETURNS>gchar *</RETURNS>
ThunarxFileInfo *file_info
</FUNCTION>
<FUNCTION>
<NAME>thunarx_file_info_get_parent_uri</NAME>
<RETURNS>gchar *</RETURNS>
ThunarxFileInfo *file_info
</FUNCTION>
<FUNCTION>
<NAME>thunarx_file_info_get_uri_scheme</NAME>
<RETURNS>gchar *</RETURNS>
ThunarxFileInfo *file_info
</FUNCTION>
<FUNCTION>
<NAME>thunarx_file_info_get_mime_type</NAME>
<RETURNS>gchar *</RETURNS>
ThunarxFileInfo *file_info
</FUNCTION>
<FUNCTION>
<NAME>thunarx_file_info_has_mime_type</NAME>
<RETURNS>gboolean</RETURNS>
ThunarxFileInfo *file_info, const gchar     *mime_type
</FUNCTION>
<FUNCTION>
<NAME>thunarx_file_info_is_directory</NAME>
<RETURNS>gboolean</RETURNS>
ThunarxFileInfo *file_info
</FUNCTION>
<FUNCTION>
<NAME>thunarx_file_info_get_file_info</NAME>
<RETURNS>GFileInfo *</RETURNS>
ThunarxFileInfo *file_info
</FUNCTION>
<FUNCTION>
<NAME>thunarx_file_info_get_filesystem_info</NAME>
<RETURNS>GFileInfo *</RETURNS>
ThunarxFileInfo *file_info
</FUNCTION>
<FUNCTION>
<NAME>thunarx_file_info_get_location</NAME>
<RETURNS>GFile *</RETURNS>
ThunarxFileInfo *file_info
</FUNCTION>
<FUNCTION>
<NAME>thunarx_file_info_changed</NAME>
<RETURNS>void</RETURNS>
ThunarxFileInfo *file_info
</FUNCTION>
<FUNCTION>
<NAME>thunarx_file_info_renamed</NAME>
<RETURNS>void</RETURNS>
ThunarxFileInfo *file_info
</FUNCTION>
<MACRO>
<NAME>THUNARX_TYPE_FILE_INFO_LIST</NAME>
#define THUNARX_TYPE_FILE_INFO_LIST (thunarx_file_info_list_get_type ())
</MACRO>
<FUNCTION>
<NAME>thunarx_file_info_list_get_type</NAME>
<RETURNS>GType</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>thunarx_file_info_list_copy</NAME>
<RETURNS>GList *</RETURNS>
GList           *file_infos
</FUNCTION>
<FUNCTION>
<NAME>thunarx_file_info_list_free</NAME>
<RETURNS>void</RETURNS>
GList           *file_infos
</FUNCTION>
<STRUCT>
<NAME>ThunarxFileInfo</NAME>
</STRUCT>
<MACRO>
<NAME>THUNARX_TYPE_MENU_PROVIDER</NAME>
#define THUNARX_TYPE_MENU_PROVIDER           (thunarx_menu_provider_get_type ())
</MACRO>
<MACRO>
<NAME>THUNARX_MENU_PROVIDER</NAME>
#define THUNARX_MENU_PROVIDER(obj)           (G_TYPE_CHECK_INSTANCE_CAST ((obj), THUNARX_TYPE_MENU_PROVIDER, ThunarxMenuProvider))
</MACRO>
<MACRO>
<NAME>THUNARX_IS_MENU_PROVIDER</NAME>
#define THUNARX_IS_MENU_PROVIDER(obj)        (G_TYPE_CHECK_INSTANCE_TYPE ((obj), THUNARX_TYPE_MENU_PROVIDER))
</MACRO>
<MACRO>
<NAME>THUNARX_MENU_PROVIDER_GET_IFACE</NAME>
#define THUNARX_MENU_PROVIDER_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), THUNARX_TYPE_MENU_PROVIDER, ThunarxMenuProviderIface))
</MACRO>
<STRUCT>
<NAME>ThunarxMenuProviderIface</NAME>
struct _ThunarxMenuProviderIface
{
  /*< private >*/
  GTypeInterface __parent__;

  /*< public >*/
  GList *(*get_file_menu_items)    (ThunarxMenuProvider *provider,
                                    GtkWidget           *window,
                                    GList               *files);

  GList *(*get_folder_menu_items)  (ThunarxMenuProvider *provider,
                                    GtkWidget           *window,
                                    ThunarxFileInfo     *folder);

  GList *(*get_dnd_menu_items)     (ThunarxMenuProvider *provider,
                                    GtkWidget           *window,
                                    ThunarxFileInfo     *folder,
                                    GList               *files);

  /*< private >*/
  void (*reserved1) (void);
  void (*reserved2) (void);
  void (*reserved3) (void);
};
</STRUCT>
<FUNCTION>
<NAME>thunarx_menu_provider_get_type</NAME>
<RETURNS>GType</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>thunarx_menu_provider_get_file_menu_items</NAME>
<RETURNS>GList *</RETURNS>
ThunarxMenuProvider *provider, GtkWidget           *window, GList               *files
</FUNCTION>
<FUNCTION>
<NAME>thunarx_menu_provider_get_folder_menu_items</NAME>
<RETURNS>GList *</RETURNS>
ThunarxMenuProvider *provider, GtkWidget           *window, ThunarxFileInfo     *folder
</FUNCTION>
<FUNCTION>
<NAME>thunarx_menu_provider_get_dnd_menu_items</NAME>
<RETURNS>GList *</RETURNS>
ThunarxMenuProvider *provider, GtkWidget           *window, ThunarxFileInfo     *folder, GList               *files
</FUNCTION>
<STRUCT>
<NAME>ThunarxMenuProvider</NAME>
</STRUCT>
<MACRO>
<NAME>THUNARX_TYPE_MENU</NAME>
#define THUNARX_TYPE_MENU            (thunarx_menu_get_type ())
</MACRO>
<MACRO>
<NAME>THUNARX_MENU</NAME>
#define THUNARX_MENU(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), THUNARX_TYPE_MENU, ThunarxMenu))
</MACRO>
<MACRO>
<NAME>THUNARX_MENU_CLASS</NAME>
#define THUNARX_MENU_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), THUNARX_TYPE_MENU, ThunarxMenuClass))
</MACRO>
<MACRO>
<NAME>THUNARX_IS_MENU</NAME>
#define THUNARX_IS_MENU(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), THUNARX_TYPE_MENU))
</MACRO>
<MACRO>
<NAME>THUNARX_IS_MENU_CLASS</NAME>
#define THUNARX_IS_MENU_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((obj), THUNARX_TYPE_MENU))
</MACRO>
<MACRO>
<NAME>THUNARX_MENU_GET_CLASS</NAME>
#define THUNARX_MENU_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS((obj), THUNARX_TYPE_MENU))
</MACRO>
<MACRO>
<NAME>THUNARX_TYPE_MENU_ITEM</NAME>
#define THUNARX_TYPE_MENU_ITEM            (thunarx_menu_item_get_type ())
</MACRO>
<MACRO>
<NAME>THUNARX_MENU_ITEM</NAME>
#define THUNARX_MENU_ITEM(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), THUNARX_TYPE_MENU_ITEM, ThunarxMenuItem))
</MACRO>
<MACRO>
<NAME>THUNARX_MENU_ITEM_CLASS</NAME>
#define THUNARX_MENU_ITEM_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), THUNARX_TYPE_MENU_ITEM, ThunarxMenuItemClass))
</MACRO>
<MACRO>
<NAME>THUNARX_IS_MENU_ITEM</NAME>
#define THUNARX_IS_MENU_ITEM(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), THUNARX_TYPE_MENU_ITEM))
</MACRO>
<MACRO>
<NAME>THUNARX_IS_MENU_ITEM_CLASS</NAME>
#define THUNARX_IS_MENU_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((obj), THUNARX_TYPE_MENU_ITEM))
</MACRO>
<MACRO>
<NAME>THUNARX_MENU_ITEM_GET_CLASS</NAME>
#define THUNARX_MENU_ITEM_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS((obj), THUNARX_TYPE_MENU_ITEM))
</MACRO>
<STRUCT>
<NAME>ThunarxMenuClass</NAME>
struct _ThunarxMenuClass {
  GObjectClass __parent__;
};
</STRUCT>
<STRUCT>
<NAME>ThunarxMenu</NAME>
struct _ThunarxMenu {
  GObject __parent__;
  ThunarxMenuPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>ThunarxMenuItemClass</NAME>
struct _ThunarxMenuItemClass {
  GObjectClass __parent__;
  void (*activate) (ThunarxMenuItem *item);
};
</STRUCT>
<STRUCT>
<NAME>ThunarxMenuItem</NAME>
struct _ThunarxMenuItem {
  GObject __parent__;
  ThunarxMenuItemPrivate *priv;
};
</STRUCT>
<FUNCTION>
<NAME>thunarx_menu_get_type</NAME>
<RETURNS>GType</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>thunarx_menu_new</NAME>
<RETURNS>ThunarxMenu *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>thunarx_menu_append_item</NAME>
<RETURNS>void</RETURNS>
ThunarxMenu     *menu, ThunarxMenuItem *item
</FUNCTION>
<FUNCTION>
<NAME>thunarx_menu_get_items</NAME>
<RETURNS>GList *</RETURNS>
ThunarxMenu     *menu
</FUNCTION>
<FUNCTION>
<NAME>thunarx_menu_item_get_type</NAME>
<RETURNS>GType</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>thunarx_menu_item_new</NAME>
<RETURNS>ThunarxMenuItem *</RETURNS>
const gchar     *name, const gchar     *label, const gchar     *tooltip, const gchar     *icon
</FUNCTION>
<FUNCTION>
<NAME>thunarx_menu_item_activate</NAME>
<RETURNS>void</RETURNS>
ThunarxMenuItem *item
</FUNCTION>
<FUNCTION>
<NAME>thunarx_menu_item_get_sensitive</NAME>
<RETURNS>gboolean</RETURNS>
ThunarxMenuItem *item
</FUNCTION>
<FUNCTION>
<NAME>thunarx_menu_item_set_sensitive</NAME>
<RETURNS>void</RETURNS>
ThunarxMenuItem *item, gboolean         sensitive
</FUNCTION>
<FUNCTION>
<NAME>thunarx_menu_item_list_free</NAME>
<RETURNS>void</RETURNS>
GList           *items
</FUNCTION>
<FUNCTION>
<NAME>thunarx_menu_item_set_menu</NAME>
<RETURNS>void</RETURNS>
ThunarxMenuItem *item, ThunarxMenu     *menu
</FUNCTION>
<STRUCT>
<NAME>ThunarxMenuItemPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>ThunarxMenuPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>THUNARX_TYPE_PREFERENCES_PROVIDER</NAME>
#define THUNARX_TYPE_PREFERENCES_PROVIDER           (thunarx_preferences_provider_get_type ())
</MACRO>
<MACRO>
<NAME>THUNARX_PREFERENCES_PROVIDER</NAME>
#define THUNARX_PREFERENCES_PROVIDER(obj)           (G_TYPE_CHECK_INSTANCE_CAST ((obj), THUNARX_TYPE_PREFERENCES_PROVIDER, ThunarxPreferencesProvider))
</MACRO>
<MACRO>
<NAME>THUNARX_IS_PREFERENCES_PROVIDER</NAME>
#define THUNARX_IS_PREFERENCES_PROVIDER(obj)        (G_TYPE_CHECK_INSTANCE_TYPE ((obj), THUNARX_TYPE_PREFERENCES_PROVIDER))
</MACRO>
<MACRO>
<NAME>THUNARX_PREFERENCES_PROVIDER_GET_IFACE</NAME>
#define THUNARX_PREFERENCES_PROVIDER_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), THUNARX_TYPE_PREFERENCES_PROVIDER, ThunarxPreferencesProviderIface))
</MACRO>
<STRUCT>
<NAME>ThunarxPreferencesProviderIface</NAME>
struct _ThunarxPreferencesProviderIface
{
  /*< private >*/
  GTypeInterface __parent__;

  /*< public >*/
  GList *(*get_menu_items) (ThunarxPreferencesProvider *provider,
                            GtkWidget                  *window);

  /*< private >*/
  void (*reserved1) (void);
  void (*reserved2) (void);
  void (*reserved3) (void);
  void (*reserved4) (void);
  void (*reserved5) (void);
};
</STRUCT>
<FUNCTION>
<NAME>thunarx_preferences_provider_get_type</NAME>
<RETURNS>GType</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>thunarx_preferences_provider_get_menu_items</NAME>
<RETURNS>GList *</RETURNS>
ThunarxPreferencesProvider *provider, GtkWidget                  *window
</FUNCTION>
<STRUCT>
<NAME>ThunarxPreferencesProvider</NAME>
</STRUCT>
<MACRO>
<NAME>THUNAR_THREADS_ENTER</NAME>
#define THUNAR_THREADS_ENTER \
G_GNUC_BEGIN_IGNORE_DEPRECATIONS \
  gdk_threads_enter(); \
G_GNUC_END_IGNORE_DEPRECATIONS
</MACRO>
<MACRO>
<NAME>THUNAR_THREADS_LEAVE</NAME>
#define THUNAR_THREADS_LEAVE \
G_GNUC_BEGIN_IGNORE_DEPRECATIONS \
  gdk_threads_leave (); \
G_GNUC_END_IGNORE_DEPRECATIONS
</MACRO>
<MACRO>
<NAME>I_</NAME>
#define I_(string) (g_intern_static_string ((string)))
</MACRO>
<FUNCTION>
<NAME>thunarx_object_list_take_reference</NAME>
<RETURNS>void</RETURNS>
GList      *object_list, gpointer    target
</FUNCTION>
<FUNCTION>
<NAME>thunarx_param_spec_get_option_name</NAME>
<RETURNS>gchar *</RETURNS>
GParamSpec *pspec
</FUNCTION>
<MACRO>
<NAME>THUNARX_TYPE_PROPERTY_PAGE_PROVIDER</NAME>
#define THUNARX_TYPE_PROPERTY_PAGE_PROVIDER           (thunarx_property_page_provider_get_type ())
</MACRO>
<MACRO>
<NAME>THUNARX_PROPERTY_PAGE_PROVIDER</NAME>
#define THUNARX_PROPERTY_PAGE_PROVIDER(obj)           (G_TYPE_CHECK_INSTANCE_CAST ((obj), THUNARX_TYPE_PROPERTY_PAGE_PROVIDER, ThunarxPropertyPageProvider))
</MACRO>
<MACRO>
<NAME>THUNARX_IS_PROPERTY_PAGE_PROVIDER</NAME>
#define THUNARX_IS_PROPERTY_PAGE_PROVIDER(obj)        (G_TYPE_CHECK_INSTANCE_TYPE ((obj), THUNARX_TYPE_PROPERTY_PAGE_PROVIDER))
</MACRO>
<MACRO>
<NAME>THUNARX_PROPERTY_PAGE_PROVIDER_GET_IFACE</NAME>
#define THUNARX_PROPERTY_PAGE_PROVIDER_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), THUNARX_TYPE_PROPERTY_PAGE_PROVIDER, ThunarxPropertyPageProviderIface))
</MACRO>
<STRUCT>
<NAME>ThunarxPropertyPageProviderIface</NAME>
struct _ThunarxPropertyPageProviderIface
{
  /*< private >*/
  GTypeInterface __parent__;

  /*< public >*/
  GList *(*get_pages) (ThunarxPropertyPageProvider *provider,
                       GList                       *files);

  /*< private >*/
  void (*reserved1) (void);
  void (*reserved2) (void);
  void (*reserved3) (void);
  void (*reserved4) (void);
  void (*reserved5) (void);
};
</STRUCT>
<FUNCTION>
<NAME>thunarx_property_page_provider_get_type</NAME>
<RETURNS>GType</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>thunarx_property_page_provider_get_pages</NAME>
<RETURNS>GList *</RETURNS>
ThunarxPropertyPageProvider *provider, GList                       *files
</FUNCTION>
<STRUCT>
<NAME>ThunarxPropertyPageProvider</NAME>
</STRUCT>
<MACRO>
<NAME>THUNARX_TYPE_PROPERTY_PAGE</NAME>
#define THUNARX_TYPE_PROPERTY_PAGE            (thunarx_property_page_get_type ())
</MACRO>
<MACRO>
<NAME>THUNARX_PROPERTY_PAGE</NAME>
#define THUNARX_PROPERTY_PAGE(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), THUNARX_TYPE_PROPERTY_PAGE, ThunarxPropertyPage))
</MACRO>
<MACRO>
<NAME>THUNARX_PROPERTY_PAGE_CLASS</NAME>
#define THUNARX_PROPERTY_PAGE_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), THUNARX_TYPE_PROPERTY_PAGE, ThunarxPropertyPageClass))
</MACRO>
<MACRO>
<NAME>THUNARX_IS_PROPERTY_PAGE</NAME>
#define THUNARX_IS_PROPERTY_PAGE(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), THUNARX_TYPE_PROPERTY_PAGE))
</MACRO>
<MACRO>
<NAME>THUNARX_IS_PROPERTY_PAGE_CLASS</NAME>
#define THUNARX_IS_PROPERTY_PAGE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), THUNARX_TYPE_PROPERTY_PAGE))
</MACRO>
<MACRO>
<NAME>THUNARX_PROPERTY_PAGE_GET_CLASS</NAME>
#define THUNARX_PROPERTY_PAGE_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), THUNARX_TYPE_PROPERTY_PAGE))
</MACRO>
<STRUCT>
<NAME>ThunarxPropertyPageClass</NAME>
struct _ThunarxPropertyPageClass
{
  GtkBinClass __parent__;

  /*< private >*/
  void (*reserved1) (void);
  void (*reserved2) (void);
  void (*reserved3) (void);
  void (*reserved4) (void);
};
</STRUCT>
<STRUCT>
<NAME>ThunarxPropertyPage</NAME>
struct _ThunarxPropertyPage
{
  GtkBin __parent__;

  /*< private >*/
  ThunarxPropertyPagePrivate *priv;
};
</STRUCT>
<FUNCTION>
<NAME>thunarx_property_page_get_type</NAME>
<RETURNS>GType</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>thunarx_property_page_new</NAME>
<RETURNS>GtkWidget *</RETURNS>
const gchar         *label
</FUNCTION>
<FUNCTION>
<NAME>thunarx_property_page_new_with_label_widget</NAME>
<RETURNS>GtkWidget *</RETURNS>
GtkWidget           *label_widget
</FUNCTION>
<FUNCTION>
<NAME>thunarx_property_page_get_label</NAME>
<RETURNS>const gchar *</RETURNS>
ThunarxPropertyPage *property_page
</FUNCTION>
<FUNCTION>
<NAME>thunarx_property_page_set_label</NAME>
<RETURNS>void</RETURNS>
ThunarxPropertyPage *property_page, const gchar         *label
</FUNCTION>
<FUNCTION>
<NAME>thunarx_property_page_get_label_widget</NAME>
<RETURNS>GtkWidget *</RETURNS>
ThunarxPropertyPage *property_page
</FUNCTION>
<FUNCTION>
<NAME>thunarx_property_page_set_label_widget</NAME>
<RETURNS>void</RETURNS>
ThunarxPropertyPage *property_page, GtkWidget           *label_widget
</FUNCTION>
<STRUCT>
<NAME>ThunarxPropertyPagePrivate</NAME>
</STRUCT>
<MACRO>
<NAME>THUNARX_TYPE_PROVIDER_FACTORY</NAME>
#define THUNARX_TYPE_PROVIDER_FACTORY             (thunarx_provider_factory_get_type ())
</MACRO>
<MACRO>
<NAME>THUNARX_PROVIDER_FACTORY</NAME>
#define THUNARX_PROVIDER_FACTORY(obj)             (G_TYPE_CHECK_INSTANCE_CAST ((obj), THUNARX_TYPE_PROVIDER_FACTORY, ThunarxProviderFactory))
</MACRO>
<MACRO>
<NAME>THUNARX_PROVIDER_FACTORY_CLASS</NAME>
#define THUNARX_PROVIDER_FACTORY_CLASS(klass)     (G_TYPE_CHECK_CLASS_CAST ((klass), THUNARX_TYPE_PROVIDER_FACTORY, ThunarxProviderFactoryClass))
</MACRO>
<MACRO>
<NAME>THUNARX_IS_PROVIDER_FACTORY</NAME>
#define THUNARX_IS_PROVIDER_FACTORY(obj)          (G_TYPE_CHECK_INSTANCE_TYPE ((obj), THUNARX_TYPE_PROVIDER_FACTORY))
</MACRO>
<MACRO>
<NAME>THUNARX_IS_PROVIDER_FACTORY_CLASS</NAME>
#define THUNARX_IS_PROVIDER_FACTORY_CLASS(klass)  (G_TYPE_CHECK_CLASS_TYPE ((klass), THUNARX_TYPE_PROVIDER_FACTORY))
</MACRO>
<MACRO>
<NAME>THUNARX_PROVIDER_FACTORY_GET_CLASS</NAME>
#define THUNARX_PROVIDER_FACTORY_GET_CLASS(obj)   (G_TYPE_INSTANCE_GET_CLASS ((obj), THUNARX_TYPE_PROVIDER_FACTORY, ThunarxProviderFactoryClass))
</MACRO>
<FUNCTION>
<NAME>thunarx_provider_factory_get_type</NAME>
<RETURNS>GType</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>thunarx_provider_factory_get_default</NAME>
<RETURNS>ThunarxProviderFactory *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>thunarx_provider_factory_list_providers</NAME>
<RETURNS>GList *</RETURNS>
ThunarxProviderFactory *factory, GType                   type
</FUNCTION>
<STRUCT>
<NAME>ThunarxProviderFactory</NAME>
</STRUCT>
<STRUCT>
<NAME>ThunarxProviderFactoryClass</NAME>
</STRUCT>
<MACRO>
<NAME>THUNARX_TYPE_PROVIDER_MODULE</NAME>
#define THUNARX_TYPE_PROVIDER_MODULE            (thunarx_provider_module_get_type ())
</MACRO>
<MACRO>
<NAME>THUNARX_PROVIDER_MODULE</NAME>
#define THUNARX_PROVIDER_MODULE(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), THUNARX_TYPE_PROVIDER_MODULE, ThunarxProviderModule))
</MACRO>
<MACRO>
<NAME>THUNARX_PROVIDER_MODULE_CLASS</NAME>
#define THUNARX_PROVIDER_MODULE_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), THUNARX_TYPE_PROVIDER_MODULE, ThunarxProviderModuleClass))
</MACRO>
<MACRO>
<NAME>THUNARX_IS_PROVIDER_MODULE</NAME>
#define THUNARX_IS_PROVIDER_MODULE(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), THUNARX_TYPE_PROVIDER_MODULE))
</MACRO>
<MACRO>
<NAME>THUNARX_IS_PROVIDER_MODULE_CLASS</NAME>
#define THUNARX_IS_PROVIDER_MODULE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), THUNARX_TYPE_PROVIDER_MODULE))
</MACRO>
<MACRO>
<NAME>THUNARX_PROVIDER_MODULE_GET_CLASS</NAME>
#define THUNARX_PROVIDER_MODULE_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), THUNARX_TYPE_PROVIDER_MODULE, ThunarxProviderModuleClass))
</MACRO>
<FUNCTION>
<NAME>thunarx_provider_module_get_type</NAME>
<RETURNS>GType</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>thunarx_provider_module_new</NAME>
<RETURNS>ThunarxProviderModule *</RETURNS>
const gchar                 *filename
</FUNCTION>
<FUNCTION>
<NAME>thunarx_provider_module_list_types</NAME>
<RETURNS>void</RETURNS>
const ThunarxProviderModule *module, const GType                **types, gint                        *n_types
</FUNCTION>
<STRUCT>
<NAME>ThunarxProviderModule</NAME>
</STRUCT>
<STRUCT>
<NAME>ThunarxProviderModuleClass</NAME>
</STRUCT>
<MACRO>
<NAME>THUNARX_TYPE_PROVIDER_PLUGIN</NAME>
#define THUNARX_TYPE_PROVIDER_PLUGIN           (thunarx_provider_plugin_get_type ())
</MACRO>
<MACRO>
<NAME>THUNARX_PROVIDER_PLUGIN</NAME>
#define THUNARX_PROVIDER_PLUGIN(obj)           (G_TYPE_CHECK_INSTANCE_CAST ((obj), THUNARX_TYPE_PROVIDER_PLUGIN, ThunarxProviderPlugin))
</MACRO>
<MACRO>
<NAME>THUNARX_IS_PROVIDER_PLUGIN</NAME>
#define THUNARX_IS_PROVIDER_PLUGIN(obj)        (G_TYPE_CHECK_INSTANCE_TYPE ((obj), THUNARX_TYPE_PROVIDER_PLUGIN))
</MACRO>
<MACRO>
<NAME>THUNARX_PROVIDER_PLUGIN_GET_IFACE</NAME>
#define THUNARX_PROVIDER_PLUGIN_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), THUNARX_TYPE_PROVIDER_PLUGIN, ThunarxProviderPluginIface))
</MACRO>
<STRUCT>
<NAME>ThunarxProviderPluginIface</NAME>
struct _ThunarxProviderPluginIface
{
  /*< private >*/
  GTypeInterface __parent__;

  /*< public >*/
  gboolean (*get_resident)    (const ThunarxProviderPlugin *plugin);
  void     (*set_resident)    (ThunarxProviderPlugin       *plugin,
                               gboolean                     resident);

  GType    (*register_type)   (ThunarxProviderPlugin       *plugin,
                               GType                        type_parent,
                               const gchar                 *type_name,
                               const GTypeInfo             *type_info,
                               GTypeFlags                   type_flags);
  void     (*add_interface)   (ThunarxProviderPlugin       *plugin,
                               GType                        instance_type,
                               GType                        interface_type,
                               const GInterfaceInfo        *interface_info);
  GType    (*register_enum)   (ThunarxProviderPlugin       *plugin,
                               const gchar                 *name,
                               const GEnumValue            *const_static_values);
  GType    (*register_flags)  (ThunarxProviderPlugin       *plugin,
                               const gchar                 *name,
                               const GFlagsValue           *const_static_values);

  /*< private >*/
  void (*reserved1) (void);
  void (*reserved2) (void);
  void (*reserved3) (void);
  void (*reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>thunarx_provider_plugin_get_type</NAME>
<RETURNS>GType</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>thunarx_provider_plugin_get_resident</NAME>
<RETURNS>gboolean</RETURNS>
const ThunarxProviderPlugin *plugin
</FUNCTION>
<FUNCTION>
<NAME>thunarx_provider_plugin_set_resident</NAME>
<RETURNS>void</RETURNS>
ThunarxProviderPlugin       *plugin, gboolean                     resident
</FUNCTION>
<FUNCTION>
<NAME>thunarx_provider_plugin_register_type</NAME>
<RETURNS>GType</RETURNS>
ThunarxProviderPlugin *plugin, GType                  type_parent, const gchar           *type_name, const GTypeInfo       *type_info, GTypeFlags             type_flags
</FUNCTION>
<FUNCTION>
<NAME>thunarx_provider_plugin_add_interface</NAME>
<RETURNS>void</RETURNS>
ThunarxProviderPlugin *plugin, GType                  instance_type, GType                  interface_type, const GInterfaceInfo  *interface_info
</FUNCTION>
<FUNCTION>
<NAME>thunarx_provider_plugin_register_enum</NAME>
<RETURNS>GType</RETURNS>
ThunarxProviderPlugin *plugin, const gchar           *name, const GEnumValue      *const_static_values
</FUNCTION>
<FUNCTION>
<NAME>thunarx_provider_plugin_register_flags</NAME>
<RETURNS>GType</RETURNS>
ThunarxProviderPlugin *plugin, const gchar           *name, const GFlagsValue     *const_static_values
</FUNCTION>
<STRUCT>
<NAME>ThunarxProviderPlugin</NAME>
</STRUCT>
<MACRO>
<NAME>THUNARX_TYPE_RENAMER_PROVIDER</NAME>
#define THUNARX_TYPE_RENAMER_PROVIDER           (thunarx_renamer_provider_get_type ())
</MACRO>
<MACRO>
<NAME>THUNARX_RENAMER_PROVIDER</NAME>
#define THUNARX_RENAMER_PROVIDER(obj)           (G_TYPE_CHECK_INSTANCE_CAST ((obj), THUNARX_TYPE_RENAMER_PROVIDER, ThunarxRenamerProvider))
</MACRO>
<MACRO>
<NAME>THUNARX_IS_RENAMER_PROVIDER</NAME>
#define THUNARX_IS_RENAMER_PROVIDER(obj)        (G_TYPE_CHECK_INSTANCE_TYPE ((obj), THUNARX_TYPE_RENAMER_PROVIDER))
</MACRO>
<MACRO>
<NAME>THUNARX_RENAMER_PROVIDER_GET_IFACE</NAME>
#define THUNARX_RENAMER_PROVIDER_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), THUNARX_TYPE_RENAMER_PROVIDER, ThunarxRenamerProviderIface))
</MACRO>
<STRUCT>
<NAME>ThunarxRenamerProviderIface</NAME>
struct _ThunarxRenamerProviderIface
{
  /*< private >*/
  GTypeInterface __parent__;

  /*< public >*/
  GList *(*get_renamers) (ThunarxRenamerProvider *provider);

  /*< private >*/
  void (*reserved1) (void);
  void (*reserved2) (void);
  void (*reserved3) (void);
  void (*reserved4) (void);
  void (*reserved5) (void);
};
</STRUCT>
<FUNCTION>
<NAME>thunarx_renamer_provider_get_type</NAME>
<RETURNS>GType</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>thunarx_renamer_provider_get_renamers</NAME>
<RETURNS>GList *</RETURNS>
ThunarxRenamerProvider *provider
</FUNCTION>
<STRUCT>
<NAME>ThunarxRenamerProvider</NAME>
</STRUCT>
<MACRO>
<NAME>THUNARX_TYPE_RENAMER</NAME>
#define THUNARX_TYPE_RENAMER            (thunarx_renamer_get_type ())
</MACRO>
<MACRO>
<NAME>THUNARX_RENAMER</NAME>
#define THUNARX_RENAMER(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), THUNARX_TYPE_RENAMER, ThunarxRenamer))
</MACRO>
<MACRO>
<NAME>THUNARX_RENAMER_CLASS</NAME>
#define THUNARX_RENAMER_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), THUNARX_TYPE_RENAMER, ThunarxRenamerClass))
</MACRO>
<MACRO>
<NAME>THUNARX_IS_RENAMER</NAME>
#define THUNARX_IS_RENAMER(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), THUNARX_TYPE_RENAMER))
</MACRO>
<MACRO>
<NAME>THUNARX_IS_RENAMER_CLASS</NAME>
#define THUNARX_IS_RENAMER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), THUNARX_TYPE_RENAMER))
</MACRO>
<MACRO>
<NAME>THUNARX_RENAMER_GET_CLASS</NAME>
#define THUNARX_RENAMER_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), THUNARX_TYPE_RENAMER, ThunarxRenamerClass))
</MACRO>
<STRUCT>
<NAME>ThunarxRenamerClass</NAME>
struct _ThunarxRenamerClass
{
  /*< private >*/
  GtkVBoxClass __parent__;

  /*< public >*/

  /* virtual methods */
  gchar *(*process)        (ThunarxRenamer  *renamer,
                            ThunarxFileInfo *file,
                            const gchar     *text,
                            guint            index);

  void   (*load)           (ThunarxRenamer  *renamer,
                            GHashTable      *settings);
  void   (*save)           (ThunarxRenamer  *renamer,
                            GHashTable      *settings);

  GList *(*get_menu_items) (ThunarxRenamer  *renamer,
                            GtkWindow       *window,
                            GList           *files);

  /*< private >*/
  void (*reserved0) (void);
  void (*reserved1) (void);
  void (*reserved2) (void);
  void (*reserved3) (void);
  void (*reserved4) (void);

  /*< public >*/

  /* signals */
  void (*changed) (ThunarxRenamer *renamer);

  /*< private >*/
  void (*reserved6) (void);
  void (*reserved7) (void);
  void (*reserved8) (void);
  void (*reserved9) (void);
};
</STRUCT>
<STRUCT>
<NAME>ThunarxRenamer</NAME>
struct _ThunarxRenamer
{
  /*< private >*/
  GtkVBox                __parent__;
  ThunarxRenamerPrivate *priv;
};
</STRUCT>
<FUNCTION>
<NAME>thunarx_renamer_get_type</NAME>
<RETURNS>GType</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>thunarx_renamer_get_help_url</NAME>
<RETURNS>const gchar *</RETURNS>
ThunarxRenamer   *renamer
</FUNCTION>
<FUNCTION>
<NAME>thunarx_renamer_set_help_url</NAME>
<RETURNS>void</RETURNS>
ThunarxRenamer   *renamer, const gchar      *help_url
</FUNCTION>
<FUNCTION>
<NAME>thunarx_renamer_get_name</NAME>
<RETURNS>const gchar *</RETURNS>
ThunarxRenamer   *renamer
</FUNCTION>
<FUNCTION>
<NAME>thunarx_renamer_set_name</NAME>
<RETURNS>void</RETURNS>
ThunarxRenamer   *renamer, const gchar      *name
</FUNCTION>
<FUNCTION>
<NAME>thunarx_renamer_process</NAME>
<RETURNS>gchar *</RETURNS>
ThunarxRenamer   *renamer, ThunarxFileInfo  *file, const gchar      *text, guint             index
</FUNCTION>
<FUNCTION>
<NAME>thunarx_renamer_load</NAME>
<RETURNS>void</RETURNS>
ThunarxRenamer   *renamer, GHashTable       *settings
</FUNCTION>
<FUNCTION>
<NAME>thunarx_renamer_save</NAME>
<RETURNS>void</RETURNS>
ThunarxRenamer   *renamer, GHashTable       *settings
</FUNCTION>
<FUNCTION>
<NAME>thunarx_renamer_get_menu_items</NAME>
<RETURNS>GList *</RETURNS>
ThunarxRenamer   *renamer, GtkWindow        *window, GList            *files
</FUNCTION>
<FUNCTION>
<NAME>thunarx_renamer_changed</NAME>
<RETURNS>void</RETURNS>
ThunarxRenamer   *renamer
</FUNCTION>
<STRUCT>
<NAME>ThunarxRenamerPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>THUNARX_INSIDE_THUNARX_H</NAME>
#define THUNARX_INSIDE_THUNARX_H
</MACRO>
<MACRO>
<NAME>THUNARX_DEFINE_TYPE</NAME>
#define THUNARX_DEFINE_TYPE(TN, t_n, T_P)                         THUNARX_DEFINE_TYPE_EXTENDED (TN, t_n, T_P, 0, {})
</MACRO>
<MACRO>
<NAME>THUNARX_DEFINE_TYPE_WITH_CODE</NAME>
#define THUNARX_DEFINE_TYPE_WITH_CODE(TN, t_n, T_P, _C_)          THUNARX_DEFINE_TYPE_EXTENDED (TN, t_n, T_P, 0, _C_)
</MACRO>
<MACRO>
<NAME>THUNARX_DEFINE_ABSTRACT_TYPE</NAME>
#define THUNARX_DEFINE_ABSTRACT_TYPE(TN, t_n, T_P)                THUNARX_DEFINE_TYPE_EXTENDED (TN, t_n, T_P, G_TYPE_FLAG_ABSTRACT, {})
</MACRO>
<MACRO>
<NAME>THUNARX_DEFINE_ABSTRACT_TYPE_WITH_CODE</NAME>
#define THUNARX_DEFINE_ABSTRACT_TYPE_WITH_CODE(TN, t_n, T_P, _C_) THUNARX_DEFINE_TYPE_EXTENDED (TN, t_n, T_P, G_TYPE_FLAG_ABSTRACT, _C_)
</MACRO>
<MACRO>
<NAME>THUNARX_DEFINE_TYPE_EXTENDED</NAME>
#define THUNARX_DEFINE_TYPE_EXTENDED(TypeName, type_name, TYPE_PARENT, flags, CODE) \
static gpointer type_name##_parent_class = NULL; \
static GType    type_name##_type = G_TYPE_INVALID; \
\
static void     type_name##_init              (TypeName        *self); \
static void     type_name##_class_init        (TypeName##Class *klass); \
static void     type_name##_class_intern_init (TypeName##Class *klass) \
{ \
  type_name##_parent_class = g_type_class_peek_parent (klass); \
  type_name##_class_init (klass); \
} \
\
GType \
type_name##_get_type (void) \
{ \
  return type_name##_type; \
} \
\
void \
type_name##_register_type (ThunarxProviderPlugin *thunarx_define_type_plugin) \
{ \
  GType thunarx_define_type_id; \
  static const GTypeInfo thunarx_define_type_info = \
  { \
    sizeof (TypeName##Class), \
    NULL, \
    NULL, \
    (GClassInitFunc) (void (*)(void)) type_name##_class_intern_init, \
    NULL, \
    NULL, \
    sizeof (TypeName), \
    0, \
    (GInstanceInitFunc) (void (*)(void)) type_name##_init, \
    NULL, \
  }; \
  thunarx_define_type_id = thunarx_provider_plugin_register_type (thunarx_define_type_plugin, TYPE_PARENT, \
                                                                  #TypeName, &thunarx_define_type_info, flags); \
  { CODE ; } \
  type_name##_type = thunarx_define_type_id; \
}
</MACRO>
<MACRO>
<NAME>THUNARX_IMPLEMENT_INTERFACE</NAME>
#define THUNARX_IMPLEMENT_INTERFACE(TYPE_IFACE, iface_init) \
{ \
  static const GInterfaceInfo thunarx_implement_interface_info = \
  { \
    .interface_init = (GInterfaceInitFunc) (void (*)(void)) iface_init \
  }; \
  thunarx_provider_plugin_add_interface (thunarx_define_type_plugin, thunarx_define_type_id, TYPE_IFACE, &thunarx_implement_interface_info); \
}
</MACRO>
